{"name":"MIA-Hydrogenkit","tagline":"A Swift NSURLSession wrapper","body":"![logo](https://raw.githubusercontent.com/7factory/mia-HydrogenKit/gh-pages/images/krypton_400px.png \"Hydrogen Logo\")\r\n\r\n# MIA-HydrogenKit\r\n\r\nSwift networking library (wrapping NSURLSession).\r\n\r\n## Requirements\r\n\r\niOS >= 8.0, Swift\r\n\r\n## Setup\r\n\r\nAdd HydrogenKit to your Podfile.\r\n``` ruby \r\npod \"HydrogenKit\", \"~> 2.0\"\r\n```\r\nRun `pod install`.\r\n\r\n## General Usage\r\n\r\n``` swift\r\nlet hydrogen = Hydrogen()\r\n\r\nlet resource = Resource(\r\n  path: \"get\",\r\n  method: Method.GET,\r\n  parse: { data in\r\n      // perform standard JSON decoding using NSJSONSerialization here\r\n      return \"Hello World\"\r\n  }\r\n)\r\n\r\nlet task = hydrogen.request(\r\n  NSURL(string: \"http://httpbin.org\")!,\r\n  resource: resource,\r\n  completion: { result in\r\n      switch result {\r\n      case let .Success(value, request, statusCode):\r\n        print(value, request, statusCode)\r\n      case let .Error(error, request):\r\n        print(error, request)\r\n      }\r\n  }\r\n)\r\ntask.resume()\r\n```\r\n\r\nThe snippet above uses four main steps to perform a network call:\r\n- An instance of hydrogen is created. **Note:** This instance should be strongly held in a property of your class.\r\n- A resource specifies the path, HTTP method, and a closure that receives an `NSData` instance and returns the parsed result. (For a REST endpoint responding with JSON, the `NSData` could be converted to JSON here.) \r\n- Hydrogen's request method is called with the base path, the previously configured resource, and a completion closure. The completion closure receives an associated enum that is either `.Success` or `.Error`. In the success case, the first associated value contains the result that was returned from the `parse` function of the resource (i.e., \"Hello World\"). **Note:** You need to dispatch to the main queue here if you want to update the UI.\r\n- The task is resumed, which starts the network call.\r\n\r\n### Configuration\r\nHydrogen can be configured with three (optional) parameters in its initializer:\r\n- `config`: An `NSURLSessionConfiguration` object. Default is `NSURLSessionConfiguration.defaultSessionConfiguration()`.\r\n- `urlRequestBuilder`: A URLRequestBuilder object that returns configured `NSURLRequest` objects. Default is an instance of Hydrogen's `URLRequestBuilder` class. (TODO: URLRequestBuilder should be a protocol.)\r\n- `acceptableStatusCodes`: A Swift Range specifying the HTTP status codes that are considered as success. Default is `200..<300`. \r\n\r\n### Performing Requests\r\nThe `request` method has three different signatures:\r\n- `baseURL: NSURL, resource: Resource<A>, completion: Result<A> -> Void`: Used in the example above.\r\n- `baseURL: NSURL, resource: Resource<A>, modifyRequest: (NSMutableURLRequest -> Void)?, completion: Result<A> -> Void`: Takes an additional closure that may modify the `NSMutableURLRequest` object before the request is started. (This closure runs on a background queue.) \r\n- `baseURL: NSURL, request: Request<A>`: Can be used to retry a failed request in the completion closure.\r\n\r\n### Cancelling Requests\r\nYou can either call `cancel` on a `Task` returned from the request method or call `cancelAll` to stop all calls of a Hydrogen instance.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}